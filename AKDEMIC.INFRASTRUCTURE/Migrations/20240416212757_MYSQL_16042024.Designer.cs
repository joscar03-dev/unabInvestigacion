// <auto-generated />
using System;
using AKDEMIC.INFRASTRUCTURE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AKDEMIC.INFRASTRUCTURE.Migrations
{
    [DbContext(typeof(AkdemicContext))]
    [Migration("20240416212757_MYSQL_16042024")]
    partial class MYSQL_16042024
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_AspNetRoles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("IX_AspNetRoles_NormalizedName");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthenticationUserId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("CteVitaeConcytecUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("CurriculumVitaeUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<short>("EmailConfirmed")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("FirstLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FullName")
                        .HasMaxLength(750)
                        .HasColumnType("varchar(750)");

                    b.Property<short>("LockoutEnabled")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<short>("PhoneNumberConfirmed")
                        .HasColumnType("smallint");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.Property<string>("RelationId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<short>("TwoFactorEnabled")
                        .HasColumnType("smallint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id")
                        .HasName("PK_AspNetUsers");

                    b.HasIndex("FullName");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("IX_AspNetUsers_NormalizedEmail");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("IX_AspNetUsers_NormalizedUserName");

                    b.HasIndex("UserName");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_AspNetUserRoles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbsoluteUri")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("KeyValues")
                        .HasColumnType("longtext");

                    b.Property<string>("NewValues")
                        .HasColumnType("longtext");

                    b.Property<string>("OldValues")
                        .HasColumnType("longtext");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_Audits");

                    b.ToTable("General_Audits", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.Configuration", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Key")
                        .HasName("PK_Configurations");

                    b.ToTable("General_Configurations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.UserRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_UserRequests");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserRequests_UserId");

                    b.ToTable("General_UserRequests", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationVacancyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("ExternalEvaluationScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FinalScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InterviewScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MasterClassScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Observation")
                        .HasColumnType("longtext");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<short?>("Valid")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("PK_ApplicantTeachers");

                    b.HasIndex("ConvocationId")
                        .HasDatabaseName("IX_ApplicantTeachers_ConvocationId");

                    b.HasIndex("ConvocationVacancyId")
                        .HasDatabaseName("IX_ApplicantTeachers_ConvocationVacancyId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ApplicantTeachers_UserId");

                    b.ToTable("TeacherHiring_ApplicantTeachers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacherDocument", b =>
                {
                    b.Property<Guid>("ApplicantTeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CovocationDocumentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ConvocationDocumentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("ApplicantTeacherId", "CovocationDocumentId")
                        .HasName("PK_ApplicantTeacherDocuments");

                    b.HasIndex("ConvocationDocumentId")
                        .HasDatabaseName("IX_ApplicantTeacherDocuments_ConvocationDocumentId");

                    b.ToTable("TeacherHiring_ApplicantTeacherDocuments", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacherInterview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantTeacherId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("InterviewLink")
                        .HasColumnType("longtext");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id")
                        .HasName("PK_ApplicantTeacherInterviews");

                    b.HasIndex("ApplicantTeacherId")
                        .HasDatabaseName("IX_ApplicantTeacherInterviews_ApplicantTeacherId");

                    b.ToTable("TeacherHiring_ApplicantTeacherInterviews", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacherRubricItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantTeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationRubricItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EvaluatorId")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PK_ApplicantTeacherRubricItems");

                    b.HasIndex("ApplicantTeacherId")
                        .HasDatabaseName("IX_ApplicantTeacherRubricItems_ApplicantTeacherId");

                    b.HasIndex("ConvocationRubricItemId")
                        .HasDatabaseName("IX_ApplicantTeacherRubricItems_ConvocationRubricItemId");

                    b.HasIndex("EvaluatorId")
                        .HasDatabaseName("IX_ApplicantTeacherRubricItems_EvaluatorId");

                    b.ToTable("TeacherHiring_ApplicantTeacherRubricItems", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacherRubricSectionDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ApplicantTeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationRubricSectionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ApplicantTeacherRubricSectionDocuments");

                    b.HasIndex("ApplicantTeacherId")
                        .HasDatabaseName("IX_ApplicantTeacherRubricSectionDocuments_ApplicantTeacherId");

                    b.HasIndex("ConvocationRubricSectionId")
                        .HasDatabaseName("IX_ApplicantTeacherRubricSectionDocuments_ConvocationRubricSect~");

                    b.ToTable("TeacherHiring_ApplicantTeacherRubricSectionDocuments", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<short>("EnabledMasterClass")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ExternalEvaluationWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MasterClassWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("PersonalInterviewWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_Convocations");

                    b.ToTable("TeacherHiring_Convocations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationAnswers");

                    b.HasIndex("ConvocationQuestionId")
                        .HasDatabaseName("IX_ConvocationAnswers_ConvocationQuestionId");

                    b.ToTable("TeacherHiring_ConvocationAnswers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationAnswerByUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AnswerDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("ApplicantTeacherId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ConvocationAnswerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationQuestionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationAnswerByUsers");

                    b.HasIndex("ApplicantTeacherId")
                        .HasDatabaseName("IX_ConvocationAnswerByUsers_ApplicantTeacherId");

                    b.HasIndex("ConvocationAnswerId")
                        .HasDatabaseName("IX_ConvocationAnswerByUsers_ConvocationAnswerId");

                    b.HasIndex("ConvocationQuestionId")
                        .HasDatabaseName("IX_ConvocationAnswerByUsers_ConvocationQuestionId");

                    b.ToTable("TeacherHiring_ConvocationAnswerByUsers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationCalendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationCalendars");

                    b.HasIndex("ConvocationId")
                        .HasDatabaseName("IX_ConvocationCalendars_ConvocationId");

                    b.ToTable("TeacherHiring_ConvocationCalendars", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationComitee", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AcademicDeparmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AcademicDepartmentText")
                        .HasColumnType("longtext");

                    b.Property<string>("ApplicationRoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "ConvocationId");

                    b.HasIndex("ApplicationRoleId")
                        .HasDatabaseName("IX_ConvocationComitees_ApplicationRoleId");

                    b.HasIndex("ConvocationId");

                    b.ToTable("TeacherHiring_ConvocationComitees", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationDocuments");

                    b.HasIndex("ConvocationId")
                        .HasDatabaseName("IX_ConvocationDocuments_ConvocationId");

                    b.ToTable("TeacherHiring_ConvocationDocuments", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationSectionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<byte>("StaticType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)1);

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationQuestions");

                    b.HasIndex("ConvocationSectionId")
                        .HasDatabaseName("IX_ConvocationQuestions_ConvocationSectionId");

                    b.ToTable("TeacherHiring_ConvocationQuestions", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationRubricItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationRubricSectionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<decimal>("MaxScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationRubricItems");

                    b.HasIndex("ConvocationRubricSectionId")
                        .HasDatabaseName("IX_ConvocationRubricItems_ConvocationRubricSectionId");

                    b.ToTable("TeacherHiring_ConvocationRubricItems", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationRubricSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("MaxScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<byte>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationRubricSections");

                    b.HasIndex("ConvocationId")
                        .HasDatabaseName("IX_ConvocationRubricSections_ConvocationId");

                    b.ToTable("TeacherHiring_ConvocationRubricSections", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationSections");

                    b.HasIndex("ConvocationId")
                        .HasDatabaseName("IX_ConvocationSections_ConvocationId");

                    b.ToTable("TeacherHiring_ConvocationSections", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationVacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AcademicDepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AcademicDepartmentText")
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("ContractType")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Dedication")
                        .HasColumnType("longtext");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext");

                    b.Property<string>("Subjects")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Vacancies")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ConvocationVacancies");

                    b.HasIndex("ConvocationId")
                        .HasDatabaseName("IX_ConvocationVacancies_ConvocationId");

                    b.ToTable("TeacherHiring_ConvocationVacancies", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.AuthorshipOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_AuthorshipOrders");

                    b.ToTable("TeacherInvestigation_AuthorshipOrders", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DOI")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ISBN")
                        .HasColumnType("longtext");

                    b.Property<string>("ISSN")
                        .HasColumnType("longtext");

                    b.Property<string>("MainAuthor")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OpusTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("OrganizerInstitution")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UrlEvent")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_Conferences");

                    b.HasIndex("OpusTypeId")
                        .HasDatabaseName("IX_Conferences_OpusTypeId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Conferences_UserId");

                    b.ToTable("TeacherInvestigation_Conferences", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ConferenceAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ConferenceAuthors");

                    b.HasIndex("ConferenceId")
                        .HasDatabaseName("IX_ConferenceAuthors_ConferenceId");

                    b.ToTable("TeacherInvestigation_ConferenceAuthors", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ConferenceFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ConferenceFiles");

                    b.HasIndex("ConferenceId")
                        .HasDatabaseName("IX_ConferenceFiles_ConferenceId");

                    b.ToTable("TeacherInvestigation_ConferenceFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.CoordinatorMonitorConvocation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "InvestigationConvocationId");

                    b.HasIndex("InvestigationConvocationId")
                        .HasDatabaseName("IX_CoordinatorMonitorConvocations_InvestigationConvocationId");

                    b.ToTable("TeacherInvestigation_CoordinatorMonitorConvocations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.EvaluatorCommitteeConvocation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "InvestigationConvocationId");

                    b.HasIndex("InvestigationConvocationId")
                        .HasDatabaseName("IX_EvaluatorCommitteeConvocations_InvestigationConvocationId");

                    b.ToTable("TeacherInvestigation_EvaluatorCommitteeConvocations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Organizer")
                        .HasColumnType("longtext");

                    b.Property<string>("PicturePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_Events");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_Events_UnitId");

                    b.ToTable("TeacherInvestigation_Events", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.EventParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MaternalSurname")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PaternalSurname")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("University")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_EventParticipants");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventParticipants_EventId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_EventParticipants_UserId");

                    b.ToTable("TeacherInvestigation_EventParticipants", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ExternalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ExternalEntities");

                    b.ToTable("TeacherInvestigation_ExternalEntities", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.FinancingInvestigation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_FinancingInvestigations");

                    b.ToTable("TeacherInvestigation_FinancingInvestigations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IdentificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IdentificationTypes");

                    b.ToTable("TeacherInvestigation_IdentificationTypes", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AddressedTo")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InscriptionEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InscriptionStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PicturePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TotalWinners")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorConvocations");

                    b.ToTable("TeacherInvestigation_IncubatorConvocations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationAnnex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorConvocationAnnexes");

                    b.HasIndex("IncubatorConvocationId")
                        .HasDatabaseName("IX_IncubatorConvocationAnnexes_IncubatorConvocationId");

                    b.ToTable("TeacherInvestigation_IncubatorConvocationAnnexes", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationEvaluator", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("IncubatorConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "IncubatorConvocationId");

                    b.HasIndex("IncubatorConvocationId");

                    b.ToTable("TeacherInvestigation_IncubatorConvocationEvaluators", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationFaculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FacultyText")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorConvocationFaculties");

                    b.HasIndex("IncubatorConvocationId")
                        .HasDatabaseName("IX_IncubatorConvocationFaculties_IncubatorConvocationId");

                    b.ToTable("TeacherInvestigation_IncubatorConvocationFaculties", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorConvocationFiles");

                    b.HasIndex("IncubatorConvocationId")
                        .HasDatabaseName("IX_IncubatorConvocationFiles_IncubatorConvocationId");

                    b.ToTable("TeacherInvestigation_IncubatorConvocationFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorCoordinatorMonitor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("IncubatorConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "IncubatorConvocationId");

                    b.HasIndex("IncubatorConvocationId")
                        .HasDatabaseName("IX_IncubatorCoordinatorMonitors_IncubatorConvocationId");

                    b.ToTable("TeacherInvestigation_IncubatorCoordinatorMonitors", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorEquipmentExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivityJustification")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ExpenseCode")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorPostulationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorEquipmentExpenses");

                    b.HasIndex("IncubatorPostulationId")
                        .HasDatabaseName("IX_IncubatorEquipmentExpenses_IncubatorPostulationId");

                    b.ToTable("TeacherInvestigation_IncubatorEquipmentExpenses", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorMonitor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("IncubatorConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "IncubatorConvocationId");

                    b.HasIndex("IncubatorConvocationId")
                        .HasDatabaseName("IX_IncubatorMonitors_IncubatorConvocationId");

                    b.ToTable("TeacherInvestigation_IncubatorMonitors", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorOtherExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivityJustification")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ExpenseCode")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorPostulationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorOtherExpenses");

                    b.HasIndex("IncubatorPostulationId")
                        .HasDatabaseName("IX_IncubatorOtherExpenses_IncubatorPostulationId");

                    b.ToTable("TeacherInvestigation_IncubatorOtherExpenses", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulantRubricQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("EvaluatorId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("IncubatorPostulationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IncubatorRubricCriterionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorPostulantRubricQualifications");

                    b.HasIndex("EvaluatorId")
                        .HasDatabaseName("IX_IncubatorPostulantRubricQualifications_EvaluatorId");

                    b.HasIndex("IncubatorPostulationId")
                        .HasDatabaseName("IX_IncubatorPostulantRubricQualifications_IncubatorPostulationId");

                    b.HasIndex("IncubatorRubricCriterionId")
                        .HasDatabaseName("IX_IncubatorPostulantRubricQualifications_IncubatorRubricCriter~");

                    b.ToTable("TeacherInvestigation_IncubatorPostulantRubricQualifications", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AdviserId")
                        .HasColumnType("longtext");

                    b.Property<string>("AffectationLevel")
                        .HasColumnType("longtext");

                    b.Property<string>("Breakeven")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BusinessIdeaDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("CVFilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("CoAdviserId")
                        .HasColumnType("longtext");

                    b.Property<string>("CompetitiveAdvantages")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DepartmentText")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DistrictText")
                        .HasColumnType("longtext");

                    b.Property<string>("EconomicViability")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralGoals")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MarketStudy")
                        .HasColumnType("longtext");

                    b.Property<string>("MarketingPlan")
                        .HasColumnType("longtext");

                    b.Property<string>("MerchandisingPlan")
                        .HasColumnType("longtext");

                    b.Property<string>("Mission")
                        .HasColumnType("longtext");

                    b.Property<int>("MonthDuration")
                        .HasColumnType("int");

                    b.Property<string>("PotentialStrategicPartners")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProvinceText")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Resources")
                        .HasColumnType("longtext");

                    b.Property<int>("ReviewState")
                        .HasColumnType("int");

                    b.Property<string>("TechnicalViability")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorPostulations");

                    b.HasIndex("IncubatorConvocationId")
                        .HasDatabaseName("IX_IncubatorPostulations_IncubatorConvocationId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_IncubatorPostulations_UserId");

                    b.ToTable("TeacherInvestigation_IncubatorPostulations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorPostulationSpecificGoalId")
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorPostulationActivities");

                    b.HasIndex("IncubatorPostulationSpecificGoalId")
                        .HasDatabaseName("IX_IncubatorPostulationActivities_IncubatorPostulationSpecificG~");

                    b.ToTable("TeacherInvestigation_IncubatorPostulationActivities", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationActivityMonth", b =>
                {
                    b.Property<Guid>("IncubatorPostulationActivityId")
                        .HasColumnType("char(36)");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("IncubatorPostulationActivityId", "MonthNumber");

                    b.ToTable("TeacherInvestigation_IncubatorPostulationActivityMonths", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationAnnex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorConvocationAnnexId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("IncubatorPostulationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorPostulationAnnexes");

                    b.HasIndex("IncubatorConvocationAnnexId")
                        .HasDatabaseName("IX_IncubatorPostulationAnnexes_IncubatorConvocationAnnexId");

                    b.HasIndex("IncubatorPostulationId")
                        .HasDatabaseName("IX_IncubatorPostulationAnnexes_IncubatorPostulationId");

                    b.ToTable("TeacherInvestigation_IncubatorPostulationAnnexes", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationSpecificGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorPostulationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorPostulationSpecificGoals");

                    b.HasIndex("IncubatorPostulationId")
                        .HasDatabaseName("IX_IncubatorPostulationSpecificGoals_IncubatorPostulationId");

                    b.ToTable("TeacherInvestigation_IncubatorPostulationSpecificGoals", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationTeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CareerText")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentAcademicYear")
                        .HasColumnType("int");

                    b.Property<string>("Dni")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorPostulationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorPostulationTeamMembers");

                    b.HasIndex("IncubatorPostulationId")
                        .HasDatabaseName("IX_IncubatorPostulationTeamMembers_IncubatorPostulationId");

                    b.ToTable("TeacherInvestigation_IncubatorPostulationTeamMembers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricCriterion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorRubricSectionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorRubricCriterions");

                    b.HasIndex("IncubatorRubricSectionId")
                        .HasDatabaseName("IX_IncubatorRubricCriterions_IncubatorRubricSectionId");

                    b.ToTable("TeacherInvestigation_IncubatorRubricCriterions", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorRubricCriterionId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorRubricLevels");

                    b.HasIndex("IncubatorRubricCriterionId")
                        .HasDatabaseName("IX_IncubatorRubricLevels_IncubatorRubricCriterionId");

                    b.ToTable("TeacherInvestigation_IncubatorRubricLevels", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("MaxSectionScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorRubricSections");

                    b.HasIndex("IncubatorConvocationId")
                        .HasDatabaseName("IX_IncubatorRubricSections_IncubatorConvocationId");

                    b.ToTable("TeacherInvestigation_IncubatorRubricSections", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorSuppliesExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivityJustification")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ExpenseCode")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorPostulationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorSuppliesExpenses");

                    b.HasIndex("IncubatorPostulationId")
                        .HasDatabaseName("IX_IncubatorSuppliesExpenses_IncubatorPostulationId");

                    b.ToTable("TeacherInvestigation_IncubatorSuppliesExpenses", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorThirdPartyServiceExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivityJustification")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ExpenseCode")
                        .HasColumnType("longtext");

                    b.Property<Guid>("IncubatorPostulationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IncubatorThirdPartyServiceExpenses");

                    b.HasIndex("IncubatorPostulationId")
                        .HasDatabaseName("IX_IncubatorThirdPartyServiceExpenses_IncubatorPostulationId");

                    b.ToTable("TeacherInvestigation_IncubatorThirdPartyServiceExpenses", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IndexPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_IndexPlaces");

                    b.ToTable("TeacherInvestigation_IndexPlaces", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("InvestigationQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationAnswers");

                    b.HasIndex("InvestigationQuestionId")
                        .HasDatabaseName("IX_InvestigationAnswers_InvestigationQuestionId");

                    b.ToTable("TeacherInvestigation_InvestigationAnswers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationAnswerByUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AnswerDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("InvestigationAnswerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InvestigationQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationAnswerByUsers");

                    b.HasIndex("InvestigationAnswerId")
                        .HasDatabaseName("IX_InvestigationAnswerByUsers_InvestigationAnswerId");

                    b.HasIndex("InvestigationQuestionId")
                        .HasDatabaseName("IX_InvestigationAnswerByUsers_InvestigationQuestionId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_InvestigationAnswerByUsers_UserId");

                    b.ToTable("TeacherInvestigation_InvestigationAnswerByUsers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationAreas");

                    b.ToTable("TeacherInvestigation_InvestigationAreas", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<short>("AllowInquiries")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("varchar(3000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InquiryEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InquiryStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InscriptionEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InscriptionStartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("MinScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .HasMaxLength(900)
                        .HasColumnType("varchar(900)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationConvocations");

                    b.ToTable("TeacherInvestigation_InvestigationConvocations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationEvaluator", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "InvestigationConvocationId");

                    b.HasIndex("InvestigationConvocationId");

                    b.ToTable("TeacherInvestigation_InvestigationConvocationEvaluators", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationConvocationFiles");

                    b.HasIndex("InvestigationConvocationId")
                        .HasDatabaseName("IX_InvestigationConvocationFiles_InvestigationConvocationId");

                    b.ToTable("TeacherInvestigation_InvestigationConvocationFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("NewEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OldEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ResolutionUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationConvocationHistories");

                    b.HasIndex("InvestigationConvocationId")
                        .HasDatabaseName("IX_InvestigationConvocationHistories_InvestigationConvocationId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_InvestigationConvocationHistories_UserId");

                    b.ToTable("TeacherInvestigation_InvestigationConvocationHistories", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationInquiry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Inquiry")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationConvocationInquiries");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_InvestigationConvocationInquiries_InvestigationConvocationPo~");

                    b.ToTable("TeacherInvestigation_InvestigationConvocationInquiries", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AnalysisTechnique")
                        .HasColumnType("longtext");

                    b.Property<string>("BibliographicReferences")
                        .HasColumnType("longtext");

                    b.Property<string>("BroadcastArticle")
                        .HasColumnType("longtext");

                    b.Property<int?>("Budget")
                        .HasColumnType("int");

                    b.Property<Guid?>("CareerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CareerText")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("EthicalConsiderations")
                        .HasColumnType("longtext");

                    b.Property<string>("ExpectedResults")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ExternalEntityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FacultyText")
                        .HasColumnType("longtext");

                    b.Property<string>("FieldWork")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("FinancingInvestigationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("GeneralGoal")
                        .HasColumnType("longtext");

                    b.Property<string>("Hypothesis")
                        .HasColumnType("longtext");

                    b.Property<string>("InformationCollectionTechnique")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("InvestigationAreaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InvestigationPatternId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InvestigationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Justification")
                        .HasColumnType("longtext");

                    b.Property<string>("MainLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("MethodologyDescription")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("MethodologyTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MonitorDocumentPath")
                        .HasColumnType("longtext");

                    b.Property<string>("MonitorUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Population")
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemFormulation")
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemRecord")
                        .HasColumnType("longtext");

                    b.Property<string>("ProcessDevelopment")
                        .HasColumnType("longtext");

                    b.Property<int>("ProgressState")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectDuration")
                        .HasColumnType("int");

                    b.Property<int>("ProjectState")
                        .HasColumnType("int");

                    b.Property<string>("ProjectTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("PublishedArticle")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ResearchCenterId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ResolutionDocumentPath")
                        .HasColumnType("longtext");

                    b.Property<int>("ReviewState")
                        .HasColumnType("int");

                    b.Property<string>("SpecificGoal")
                        .HasColumnType("longtext");

                    b.Property<string>("TheoreticalFundament")
                        .HasColumnType("longtext");

                    b.Property<string>("ThesisDevelopment")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Variable")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationConvocationPostulants");

                    b.HasIndex("ExternalEntityId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_ExternalEntityId");

                    b.HasIndex("FinancingInvestigationId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_FinancingInvestigationId");

                    b.HasIndex("InvestigationAreaId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_InvestigationAreaId");

                    b.HasIndex("InvestigationConvocationId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_InvestigationConvocationId");

                    b.HasIndex("InvestigationPatternId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_InvestigationPatternId");

                    b.HasIndex("InvestigationTypeId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_InvestigationTypeId");

                    b.HasIndex("MethodologyTypeId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_MethodologyTypeId");

                    b.HasIndex("MonitorUserId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_MonitorUserId");

                    b.HasIndex("ResearchCenterId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_ResearchCenterId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_InvestigationConvocationPostulants_UserId");

                    b.ToTable("TeacherInvestigation_InvestigationConvocationPostulants", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<short>("AnalysisTechniqueHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("AnalysisTechniqueWeight")
                        .HasColumnType("int");

                    b.Property<short>("AreaHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("AreaWeight")
                        .HasColumnType("int");

                    b.Property<short>("BibliographicReferencesHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("BibliographicReferencesWeight")
                        .HasColumnType("int");

                    b.Property<short>("BroadcastArticleHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("BroadcastArticleWeight")
                        .HasColumnType("int");

                    b.Property<short>("BudgetHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("BudgetWeight")
                        .HasColumnType("int");

                    b.Property<short>("CareerHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("CareerWeight")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<short>("EthicalConsiderationsHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("EthicalConsiderationsWeight")
                        .HasColumnType("int");

                    b.Property<short>("ExecutionPlaceHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ExecutionPlaceWeight")
                        .HasColumnType("int");

                    b.Property<short>("ExpectedResultsHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ExpectedResultsWeight")
                        .HasColumnType("int");

                    b.Property<short>("ExternalEntityHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ExternalEntityWeight")
                        .HasColumnType("int");

                    b.Property<short>("ExternalMemberHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ExternalMemberWeight")
                        .HasColumnType("int");

                    b.Property<short>("FacultyHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("FacultyWeight")
                        .HasColumnType("int");

                    b.Property<short>("FieldWorkHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("FieldWorkWeight")
                        .HasColumnType("int");

                    b.Property<short>("FinancingHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("FinancingWeight")
                        .HasColumnType("int");

                    b.Property<short>("GeneralGoalHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("GeneralGoalWeight")
                        .HasColumnType("int");

                    b.Property<short>("HypothesisHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("HypothesisWeight")
                        .HasColumnType("int");

                    b.Property<short>("InformationCollectionTechniqueHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("InformationCollectionTechniqueWeight")
                        .HasColumnType("int");

                    b.Property<short>("InvestigationPatternHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("InvestigationPatternWeight")
                        .HasColumnType("int");

                    b.Property<short>("InvestigationTypeHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("InvestigationTypeWeight")
                        .HasColumnType("int");

                    b.Property<short>("JustificationHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("JustificationWeight")
                        .HasColumnType("int");

                    b.Property<short>("MainLocationHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("MainLocationWeight")
                        .HasColumnType("int");

                    b.Property<short>("MethodologyDescriptionHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("MethodologyDescriptionWeight")
                        .HasColumnType("int");

                    b.Property<short>("MethodologyTypeHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("MethodologyTypeWeight")
                        .HasColumnType("int");

                    b.Property<short>("PopulationHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("PopulationWeight")
                        .HasColumnType("int");

                    b.Property<short>("PostulationAttachmentFilesHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("PostulationAttachmentFilesWeight")
                        .HasColumnType("int");

                    b.Property<short>("ProblemDescriptionHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ProblemDescriptionWeight")
                        .HasColumnType("int");

                    b.Property<short>("ProblemFormulationHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ProblemFormulationWeight")
                        .HasColumnType("int");

                    b.Property<short>("ProblemRecordHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ProblemRecordWeight")
                        .HasColumnType("int");

                    b.Property<short>("ProcessDevelopmentHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ProcessDevelopmentWeight")
                        .HasColumnType("int");

                    b.Property<short>("ProjectDurationHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ProjectDurationWeight")
                        .HasColumnType("int");

                    b.Property<short>("ProjectTitleHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ProjectTitleWeight")
                        .HasColumnType("int");

                    b.Property<short>("PublishedArticleHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("PublishedArticleWeight")
                        .HasColumnType("int");

                    b.Property<short>("QuestionsHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("QuestionsWeight")
                        .HasColumnType("int");

                    b.Property<short>("ResearchCenterHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ResearchCenterWeight")
                        .HasColumnType("int");

                    b.Property<short>("SpecificGoalHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("SpecificGoalWeight")
                        .HasColumnType("int");

                    b.Property<short>("TeamMemberUserHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("TeamMemberUserWeight")
                        .HasColumnType("int");

                    b.Property<short>("TheoreticalFundamentHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("TheoreticalFundamentWeight")
                        .HasColumnType("int");

                    b.Property<short>("ThesisDevelopmentHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("ThesisDevelopmentWeight")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<short>("VariableHidden")
                        .HasColumnType("smallint");

                    b.Property<int>("VariableWeight")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationConvocationRequirements");

                    b.ToTable("TeacherInvestigation_InvestigationConvocationRequirements", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationSupervisor", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "InvestigationConvocationId");

                    b.HasIndex("InvestigationConvocationId")
                        .HasDatabaseName("IX_InvestigationConvocationSupervisors_InvestigationConvocation~");

                    b.ToTable("TeacherInvestigation_InvestigationConvocationSupervisors", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationPattern", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationPatterns");

                    b.ToTable("TeacherInvestigation_InvestigationPatterns", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ExecutionAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("FinalReportUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("GanttDiagramUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("GeneralGoal")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("InvestigationProjectTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SpecificGoal")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationProjects");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_InvestigationProjects_InvestigationConvocationPostulantId");

                    b.HasIndex("InvestigationProjectTypeId")
                        .HasDatabaseName("IX_InvestigationProjects_InvestigationProjectTypeId");

                    b.ToTable("TeacherInvestigation_InvestigationProjects", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ExpenseCode")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationProjectTaskId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProductType")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationProjectExpenses");

                    b.HasIndex("InvestigationProjectTaskId")
                        .HasDatabaseName("IX_InvestigationProjectExpenses_InvestigationProjectTaskId");

                    b.ToTable("TeacherInvestigation_InvestigationProjectExpenses", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("InvestigationProjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastEmailSendedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ReportUrl")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationProjectReports");

                    b.HasIndex("InvestigationProjectId")
                        .HasDatabaseName("IX_InvestigationProjectReports_InvestigationProjectId");

                    b.ToTable("TeacherInvestigation_InvestigationProjectReports", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationProjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationProjectTasks");

                    b.HasIndex("InvestigationProjectId")
                        .HasDatabaseName("IX_InvestigationProjectTasks_InvestigationProjectId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_InvestigationProjectTasks_UserId");

                    b.ToTable("TeacherInvestigation_InvestigationProjectTasks", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectTeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("CvFilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Objectives")
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeamMemberRoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationProjectTeamMembers");

                    b.HasIndex("InvestigationProjectId")
                        .HasDatabaseName("IX_InvestigationProjectTeamMembers_InvestigationProjectId");

                    b.HasIndex("TeamMemberRoleId")
                        .HasDatabaseName("IX_InvestigationProjectTeamMembers_TeamMemberRoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_InvestigationProjectTeamMembers_UserId");

                    b.ToTable("TeacherInvestigation_InvestigationProjectTeamMembers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationProjectTypes");

                    b.ToTable("TeacherInvestigation_InvestigationProjectTypes", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationRequirementId")
                        .HasColumnType("char(36)");

                    b.Property<short>("IsRequired")
                        .HasColumnType("smallint");

                    b.Property<int>("Type")
                        .HasMaxLength(500)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationQuestions");

                    b.HasIndex("InvestigationConvocationRequirementId")
                        .HasDatabaseName("IX_InvestigationQuestions_InvestigationConvocationRequirementId");

                    b.ToTable("TeacherInvestigation_InvestigationQuestions", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricCriterion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationRubricSectionId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationRubricCriterions");

                    b.HasIndex("InvestigationRubricSectionId")
                        .HasDatabaseName("IX_InvestigationRubricCriterions_InvestigationRubricSectionId");

                    b.ToTable("TeacherInvestigation_InvestigationRubricCriterions", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationRubricCriterionId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationRubricLevels");

                    b.HasIndex("InvestigationRubricCriterionId")
                        .HasDatabaseName("IX_InvestigationRubricLevels_InvestigationRubricCriterionId");

                    b.ToTable("TeacherInvestigation_InvestigationRubricLevels", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricSection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("MaxSectionScore")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationRubricSections");

                    b.HasIndex("InvestigationConvocationId")
                        .HasDatabaseName("IX_InvestigationRubricSections_InvestigationConvocationId");

                    b.ToTable("TeacherInvestigation_InvestigationRubricSections", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_InvestigationTypes");

                    b.ToTable("TeacherInvestigation_InvestigationTypes", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.MethodologyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_MethodologyTypes");

                    b.ToTable("TeacherInvestigation_MethodologyTypes", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.MonitorConvocation", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("InvestigationConvocationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "InvestigationConvocationId");

                    b.HasIndex("InvestigationConvocationId")
                        .HasDatabaseName("IX_MonitorConvocations_InvestigationConvocationId");

                    b.ToTable("TeacherInvestigation_MonitorConvocations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.OperativePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Observation")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_OperativePlans");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("IX_OperativePlans_UnitId");

                    b.ToTable("TeacherInvestigation_OperativePlans", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.OpusType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_OpusTypes");

                    b.ToTable("TeacherInvestigation_OpusTypes", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantAnnexFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PostulantAnnexFiles");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantAnnexFiles_InvestigationConvocationPostulantId");

                    b.ToTable("TeacherInvestigation_PostulantAnnexFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantExecutionPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DepartmentText")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DistrictText")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProvinceText")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PostulantExecutionPlaces");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantExecutionPlaces_InvestigationConvocationPostulantId");

                    b.ToTable("TeacherInvestigation_PostulantExecutionPlaces", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantExternalMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("CvFilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .HasColumnType("longtext");

                    b.Property<string>("InstitutionOrigin")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Objectives")
                        .HasColumnType("longtext");

                    b.Property<string>("PaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Profession")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PostulantExternalMembers");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantExternalMembers_InvestigationConvocationPostulantId");

                    b.ToTable("TeacherInvestigation_PostulantExternalMembers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantFinancialFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PostulantFinancialFiles");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantFinancialFiles_InvestigationConvocationPostulantId");

                    b.ToTable("TeacherInvestigation_PostulantFinancialFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantObservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PostulantObservations");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantObservations_InvestigationConvocationPostulantId");

                    b.ToTable("TeacherInvestigation_PostulantObservations", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantResearchLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResearchLineId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PostulantResearchLines");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantResearchLines_InvestigationConvocationPostulantId");

                    b.HasIndex("ResearchLineId")
                        .HasDatabaseName("IX_PostulantResearchLines_ResearchLineId");

                    b.ToTable("TeacherInvestigation_PostulantResearchLines", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantRubricQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("EvaluatorId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("InvestigationRubricCriterionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PK_PostulantRubricQualifications");

                    b.HasIndex("EvaluatorId")
                        .HasDatabaseName("IX_PostulantRubricQualifications_EvaluatorId");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantRubricQualifications_InvestigationConvocationPostul~");

                    b.HasIndex("InvestigationRubricCriterionId")
                        .HasDatabaseName("IX_PostulantRubricQualifications_InvestigationRubricCriterionId");

                    b.ToTable("TeacherInvestigation_PostulantRubricQualifications", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantTeamMemberUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("CvFilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Objectives")
                        .HasColumnType("longtext");

                    b.Property<Guid>("TeamMemberRoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_PostulantTeamMemberUsers");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantTeamMemberUsers_InvestigationConvocationPostulantId");

                    b.HasIndex("TeamMemberRoleId")
                        .HasDatabaseName("IX_PostulantTeamMemberUsers_TeamMemberRoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PostulantTeamMemberUsers_UserId");

                    b.ToTable("TeacherInvestigation_PostulantTeamMemberUsers", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantTechnicalFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PostulantTechnicalFiles");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_PostulantTechnicalFiles_InvestigationConvocationPostulantId");

                    b.ToTable("TeacherInvestigation_PostulantTechnicalFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ProgressFileConvocationPostulant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationConvocationPostulantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ProgressFileConvocationPostulants");

                    b.HasIndex("InvestigationConvocationPostulantId")
                        .HasDatabaseName("IX_ProgressFileConvocationPostulants_InvestigationConvocationPo~");

                    b.ToTable("TeacherInvestigation_ProgressFileConvocationPostulants", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Publication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AuthorshipOrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CountryText")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DOI")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Fascicle")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("IdentificationTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("IndexPlaceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Journal")
                        .HasColumnType("longtext");

                    b.Property<string>("MainAuthor")
                        .HasColumnType("longtext");

                    b.Property<Guid>("OpusTypeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PublicationFunctionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PublishingHouse")
                        .HasColumnType("longtext");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Volume")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkCategory")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Publications");

                    b.HasIndex("AuthorshipOrderId")
                        .HasDatabaseName("IX_Publications_AuthorshipOrderId");

                    b.HasIndex("IdentificationTypeId")
                        .HasDatabaseName("IX_Publications_IdentificationTypeId");

                    b.HasIndex("IndexPlaceId")
                        .HasDatabaseName("IX_Publications_IndexPlaceId");

                    b.HasIndex("OpusTypeId")
                        .HasDatabaseName("IX_Publications_OpusTypeId");

                    b.HasIndex("PublicationFunctionId")
                        .HasDatabaseName("IX_Publications_PublicationFunctionId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Publications_UserId");

                    b.ToTable("TeacherInvestigation_Publications", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublicationAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PublicationAuthors");

                    b.HasIndex("PublicationId")
                        .HasDatabaseName("IX_PublicationAuthors_PublicationId");

                    b.ToTable("TeacherInvestigation_PublicationAuthors", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublicationFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublicationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PublicationFiles");

                    b.HasIndex("PublicationId")
                        .HasDatabaseName("IX_PublicationFiles_PublicationId");

                    b.ToTable("TeacherInvestigation_PublicationFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublicationFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PublicationFunctions");

                    b.ToTable("TeacherInvestigation_PublicationFunctions", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("ISBN")
                        .HasColumnType("longtext");

                    b.Property<string>("LegalDeposit")
                        .HasColumnType("longtext");

                    b.Property<string>("MainAuthor")
                        .HasColumnType("longtext");

                    b.Property<int>("PagesCount")
                        .HasColumnType("int");

                    b.Property<string>("PublishingCity")
                        .HasColumnType("longtext");

                    b.Property<string>("PublishingHouse")
                        .HasColumnType("longtext");

                    b.Property<int>("PublishingYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_PublishedBooks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PublishedBooks_UserId");

                    b.ToTable("TeacherInvestigation_PublishedBooks", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBookAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublishedBookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PublishedBookAuthors");

                    b.HasIndex("PublishedBookId")
                        .HasDatabaseName("IX_PublishedBookAuthors_PublishedBookId");

                    b.ToTable("TeacherInvestigation_PublishedBookAuthors", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBookFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublishedBookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PublishedBookFiles");

                    b.HasIndex("PublishedBookId")
                        .HasDatabaseName("IX_PublishedBookFiles_PublishedBookId");

                    b.ToTable("TeacherInvestigation_PublishedBookFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BookTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("ChapterTitle")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DOI")
                        .HasColumnType("longtext");

                    b.Property<int>("EndPage")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .HasColumnType("longtext");

                    b.Property<string>("MainAuthor")
                        .HasColumnType("longtext");

                    b.Property<string>("PublishingCity")
                        .HasColumnType("longtext");

                    b.Property<string>("PublishingHouse")
                        .HasColumnType("longtext");

                    b.Property<int>("PublishingYear")
                        .HasColumnType("int");

                    b.Property<int>("StartPage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_PublishedChapterBooks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_PublishedChapterBooks_UserId");

                    b.ToTable("TeacherInvestigation_PublishedChapterBooks", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBookAuthor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Dni")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("MaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PaternalSurname")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublishedChapterBookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PublishedChapterBookAuthors");

                    b.HasIndex("PublishedChapterBookId")
                        .HasDatabaseName("IX_PublishedChapterBookAuthors_PublishedChapterBookId");

                    b.ToTable("TeacherInvestigation_PublishedChapterBookAuthors", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBookFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("PublishedChapterBookId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_PublishedChapterBookFiles");

                    b.HasIndex("PublishedChapterBookId")
                        .HasDatabaseName("IX_PublishedChapterBookFiles_PublishedChapterBookId");

                    b.ToTable("TeacherInvestigation_PublishedChapterBookFiles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ResearchCenters");

                    b.ToTable("TeacherInvestigation_ResearchCenters", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ResearchLineCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ResearchLines");

                    b.HasIndex("ResearchLineCategoryId")
                        .HasDatabaseName("IX_ResearchLines_ResearchLineCategoryId");

                    b.ToTable("TeacherInvestigation_ResearchLines", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLineCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ResearchLineCategories");

                    b.ToTable("TeacherInvestigation_ResearchLineCategories", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLineCategoryRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<short>("Hidden")
                        .HasColumnType("smallint");

                    b.Property<Guid>("InvestigationConvocationRequirementId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResearchLineCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ResearchLineCategoryRequirements");

                    b.HasIndex("InvestigationConvocationRequirementId")
                        .HasDatabaseName("IX_ResearchLineCategoryRequirements_InvestigationConvocationReq~");

                    b.HasIndex("ResearchLineCategoryId")
                        .HasDatabaseName("IX_ResearchLineCategoryRequirements_ResearchLineCategoryId");

                    b.ToTable("TeacherInvestigation_ResearchLineCategoryRequirements", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ScientificArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("InvestigationProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_ScientificArticles");

                    b.HasIndex("InvestigationProjectId")
                        .HasDatabaseName("IX_ScientificArticles_InvestigationProjectId");

                    b.ToTable("TeacherInvestigation_ScientificArticles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.TeamMemberRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id")
                        .HasName("PK_TeamMemberRoles");

                    b.ToTable("TeacherInvestigation_TeamMemberRoles", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_Units");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Units_UserId");

                    b.ToTable("TeacherInvestigation_Units", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_AspNetRoleClaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_AspNetUserClaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PK_AspNetUserLogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PK_AspNetUserTokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.ApplicationUserRole", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.UserRequest", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRequests_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacher", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", "Convocation")
                        .WithMany("ApplicantTeachers")
                        .HasForeignKey("ConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicantTeachers_Convocations_ConvocationId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationVacancy", "ConvocationVacancy")
                        .WithMany("ApplicantTeachers")
                        .HasForeignKey("ConvocationVacancyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicantTeachers_ConvocationVacancies_ConvocationVacancyId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ApplicantTeachers_AspNetUsers_UserId");

                    b.Navigation("Convocation");

                    b.Navigation("ConvocationVacancy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacherDocument", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacher", "ApplicantTeacher")
                        .WithMany("ApplicantTeacherDocuments")
                        .HasForeignKey("ApplicantTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicantTeacherDocuments_ApplicantTeachers_ApplicantTeacher~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationDocument", "ConvocationDocument")
                        .WithMany("ApplicantTeacherDocuments")
                        .HasForeignKey("ConvocationDocumentId")
                        .HasConstraintName("FK_ApplicantTeacherDocuments_ConvocationDocuments_ConvocationDo~");

                    b.Navigation("ApplicantTeacher");

                    b.Navigation("ConvocationDocument");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacherInterview", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacher", "ApplicantTeacher")
                        .WithMany("ApplicantTeacherInterviews")
                        .HasForeignKey("ApplicantTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicantTeacherInterviews_ApplicantTeachers_ApplicantTeache~");

                    b.Navigation("ApplicantTeacher");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacherRubricItem", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacher", "ApplicantTeacher")
                        .WithMany()
                        .HasForeignKey("ApplicantTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicantTeacherRubricItems_ApplicantTeachers_ApplicantTeach~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationRubricItem", "ConvocationRubricItem")
                        .WithMany()
                        .HasForeignKey("ConvocationRubricItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicantTeacherRubricItems_ConvocationRubricItems_Convocati~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .HasConstraintName("FK_ApplicantTeacherRubricItems_AspNetUsers_EvaluatorId");

                    b.Navigation("ApplicantTeacher");

                    b.Navigation("ConvocationRubricItem");

                    b.Navigation("Evaluator");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacherRubricSectionDocument", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacher", "ApplicantTeacher")
                        .WithMany("ApplicantTeacherRubricSectionDocuments")
                        .HasForeignKey("ApplicantTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicantTeacherRubricSectionDocuments_ApplicantTeachers_App~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationRubricSection", "ConvocationRubricSection")
                        .WithMany()
                        .HasForeignKey("ConvocationRubricSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicantTeacherRubricSectionDocuments_ConvocationRubricSect~");

                    b.Navigation("ApplicantTeacher");

                    b.Navigation("ConvocationRubricSection");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationAnswer", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationQuestion", "ConvocationQuestion")
                        .WithMany("ConvocationAnswers")
                        .HasForeignKey("ConvocationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationAnswers_ConvocationQuestions_ConvocationQuestionId");

                    b.Navigation("ConvocationQuestion");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationAnswerByUser", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacher", "ApplicantTeacher")
                        .WithMany("ConvocationAnswerByUsers")
                        .HasForeignKey("ApplicantTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationAnswerByUsers_ApplicantTeachers_ApplicantTeacherId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationAnswer", "ConvocationAnswer")
                        .WithMany("ConvocationAnswerByUser")
                        .HasForeignKey("ConvocationAnswerId")
                        .HasConstraintName("FK_ConvocationAnswerByUsers_ConvocationAnswers_ConvocationAnswe~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationQuestion", "ConvocationQuestion")
                        .WithMany("ConvocationAnswerByUsers")
                        .HasForeignKey("ConvocationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationAnswerByUsers_ConvocationQuestions_ConvocationQue~");

                    b.Navigation("ApplicantTeacher");

                    b.Navigation("ConvocationAnswer");

                    b.Navigation("ConvocationQuestion");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationCalendar", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", "Convocation")
                        .WithMany("ConvocationCalendars")
                        .HasForeignKey("ConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationCalendars_Convocations_ConvocationId");

                    b.Navigation("Convocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationComitee", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationComitees_AspNetRoles_ApplicationRoleId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", "Convocation")
                        .WithMany("ConvocationComitees")
                        .HasForeignKey("ConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationComitees_Convocations_ConvocationId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationComitees_AspNetUsers_UserId");

                    b.Navigation("ApplicationRole");

                    b.Navigation("Convocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationDocument", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", "Convocation")
                        .WithMany("ConvocationDocuments")
                        .HasForeignKey("ConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationDocuments_Convocations_ConvocationId");

                    b.Navigation("Convocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationQuestion", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationSection", "ConvocationSection")
                        .WithMany("ConvocationQuestions")
                        .HasForeignKey("ConvocationSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationQuestions_ConvocationSections_ConvocationSectionId");

                    b.Navigation("ConvocationSection");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationRubricItem", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationRubricSection", "ConvocationRubricSection")
                        .WithMany("ConvocationRubricItems")
                        .HasForeignKey("ConvocationRubricSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationRubricItems_ConvocationRubricSections_Convocation~");

                    b.Navigation("ConvocationRubricSection");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationRubricSection", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", "Convocation")
                        .WithMany("ConvocationRubricSections")
                        .HasForeignKey("ConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationRubricSections_Convocations_ConvocationId");

                    b.Navigation("Convocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationSection", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", "Convocation")
                        .WithMany("ConvocationSections")
                        .HasForeignKey("ConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationSections_Convocations_ConvocationId");

                    b.Navigation("Convocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationVacancy", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", "Convocation")
                        .WithMany("ConvocationVacancies")
                        .HasForeignKey("ConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConvocationVacancies_Convocations_ConvocationId");

                    b.Navigation("Convocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Conference", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.OpusType", "OpusType")
                        .WithMany()
                        .HasForeignKey("OpusTypeId")
                        .HasConstraintName("FK_Conferences_OpusTypes_OpusTypeId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Conferences_AspNetUsers_UserId");

                    b.Navigation("OpusType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ConferenceAuthor", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Conference", "Conference")
                        .WithMany("ConferenceAuthors")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConferenceAuthors_Conferences_ConferenceId");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ConferenceFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Conference", "Conference")
                        .WithMany("ConferenceFiles")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ConferenceFiles_Conferences_ConferenceId");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.CoordinatorMonitorConvocation", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany("CoordinatorMonitorConvocations")
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CoordinatorMonitorConvocations_InvestigationConvocations_Inv~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CoordinatorMonitorConvocations_AspNetUsers_UserId");

                    b.Navigation("InvestigationConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.EvaluatorCommitteeConvocation", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany("EvaluatorCommitteeConvocations")
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EvaluatorCommitteeConvocations_InvestigationConvocations_Inv~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EvaluatorCommitteeConvocations_AspNetUsers_UserId");

                    b.Navigation("InvestigationConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Event", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Events_Units_UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.EventParticipant", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Event", "Event")
                        .WithMany("EventParticipants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_EventParticipants_Events_EventId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EventParticipants_AspNetUsers_UserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationAnnex", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", "IncubatorConvocation")
                        .WithMany("IncubatorConvocationAnnexes")
                        .HasForeignKey("IncubatorConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorConvocationAnnexes_IncubatorConvocations_IncubatorC~");

                    b.Navigation("IncubatorConvocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationEvaluator", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", "IncubatorConvocation")
                        .WithMany("IncubatorConvocationEvaluators")
                        .HasForeignKey("IncubatorConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorConvocationEvaluators_IncubatorConvocations_Incubat~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorConvocationEvaluators_AspNetUsers_UserId");

                    b.Navigation("IncubatorConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationFaculty", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", "IncubatorConvocation")
                        .WithMany("IncubatorConvocationFaculties")
                        .HasForeignKey("IncubatorConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorConvocationFaculties_IncubatorConvocations_Incubato~");

                    b.Navigation("IncubatorConvocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", "IncubatorConvocation")
                        .WithMany("IncubatorConvocationFiles")
                        .HasForeignKey("IncubatorConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorConvocationFiles_IncubatorConvocations_IncubatorCon~");

                    b.Navigation("IncubatorConvocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorCoordinatorMonitor", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", "IncubatorConvocation")
                        .WithMany("IncubatorCoordinatorMonitors")
                        .HasForeignKey("IncubatorConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorCoordinatorMonitors_IncubatorConvocations_Incubator~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorCoordinatorMonitors_AspNetUsers_UserId");

                    b.Navigation("IncubatorConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorEquipmentExpense", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", "IncubatorPostulation")
                        .WithMany("IncubatorEquipmentExpenses")
                        .HasForeignKey("IncubatorPostulationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorEquipmentExpenses_IncubatorPostulations_IncubatorPo~");

                    b.Navigation("IncubatorPostulation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorMonitor", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", "IncubatorConvocation")
                        .WithMany("IncubatorMonitors")
                        .HasForeignKey("IncubatorConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorMonitors_IncubatorConvocations_IncubatorConvocation~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorMonitors_AspNetUsers_UserId");

                    b.Navigation("IncubatorConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorOtherExpense", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", "IncubatorPostulation")
                        .WithMany("IncubatorOtherExpenses")
                        .HasForeignKey("IncubatorPostulationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorOtherExpenses_IncubatorPostulations_IncubatorPostul~");

                    b.Navigation("IncubatorPostulation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulantRubricQualification", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .HasConstraintName("FK_IncubatorPostulantRubricQualifications_AspNetUsers_Evaluator~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", "IncubatorPostulation")
                        .WithMany()
                        .HasForeignKey("IncubatorPostulationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulantRubricQualifications_IncubatorPostulations~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricCriterion", "IncubatorRubricCriterion")
                        .WithMany()
                        .HasForeignKey("IncubatorRubricCriterionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulantRubricQualifications_IncubatorRubricCriter~");

                    b.Navigation("Evaluator");

                    b.Navigation("IncubatorPostulation");

                    b.Navigation("IncubatorRubricCriterion");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", "IncubatorConvocation")
                        .WithMany("IncubatorPostulations")
                        .HasForeignKey("IncubatorConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulations_IncubatorConvocations_IncubatorConvoca~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_IncubatorPostulations_AspNetUsers_UserId");

                    b.Navigation("IncubatorConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationActivity", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationSpecificGoal", "IncubatorPostulationSpecificGoal")
                        .WithMany("IncubatorPostulationActivities")
                        .HasForeignKey("IncubatorPostulationSpecificGoalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulationActivities_IncubatorPostulationSpecificG~");

                    b.Navigation("IncubatorPostulationSpecificGoal");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationActivityMonth", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationActivity", "IncubatorPostulationActivity")
                        .WithMany("IncubatorPostulationActivityMonths")
                        .HasForeignKey("IncubatorPostulationActivityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulationActivityMonths_IncubatorPostulationActiv~");

                    b.Navigation("IncubatorPostulationActivity");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationAnnex", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocationAnnex", "IncubatorConvocationAnnex")
                        .WithMany()
                        .HasForeignKey("IncubatorConvocationAnnexId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulationAnnexes_IncubatorConvocationAnnexes_Incu~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", "IncubatorPostulation")
                        .WithMany("IncubatorPostulationAnnexes")
                        .HasForeignKey("IncubatorPostulationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulationAnnexes_IncubatorPostulations_IncubatorP~");

                    b.Navigation("IncubatorConvocationAnnex");

                    b.Navigation("IncubatorPostulation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationSpecificGoal", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", "IncubatorPostulation")
                        .WithMany("IncubatorPostulationSpecificGoals")
                        .HasForeignKey("IncubatorPostulationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulationSpecificGoals_IncubatorPostulations_Incu~");

                    b.Navigation("IncubatorPostulation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationTeamMember", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", "IncubatorPostulation")
                        .WithMany("IncubatorPostulationTeamMembers")
                        .HasForeignKey("IncubatorPostulationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorPostulationTeamMembers_IncubatorPostulations_Incuba~");

                    b.Navigation("IncubatorPostulation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricCriterion", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricSection", "IncubatorRubricSection")
                        .WithMany("IncubatorRubricCriterions")
                        .HasForeignKey("IncubatorRubricSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorRubricCriterions_IncubatorRubricSections_IncubatorR~");

                    b.Navigation("IncubatorRubricSection");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricLevel", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricCriterion", "IncubatorRubricCriterion")
                        .WithMany("IncubatorRubricLevels")
                        .HasForeignKey("IncubatorRubricCriterionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorRubricLevels_IncubatorRubricCriterions_IncubatorRub~");

                    b.Navigation("IncubatorRubricCriterion");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricSection", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", "IncubatorConvocation")
                        .WithMany()
                        .HasForeignKey("IncubatorConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorRubricSections_IncubatorConvocations_IncubatorConvo~");

                    b.Navigation("IncubatorConvocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorSuppliesExpense", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", "IncubatorPostulation")
                        .WithMany("IncubatorSuppliesExpenses")
                        .HasForeignKey("IncubatorPostulationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorSuppliesExpenses_IncubatorPostulations_IncubatorPos~");

                    b.Navigation("IncubatorPostulation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorThirdPartyServiceExpense", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", "IncubatorPostulation")
                        .WithMany("IncubatorThirdPartyServiceExpenses")
                        .HasForeignKey("IncubatorPostulationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IncubatorThirdPartyServiceExpenses_IncubatorPostulations_Inc~");

                    b.Navigation("IncubatorPostulation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationAnswer", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationQuestion", "InvestigationQuestion")
                        .WithMany("InvestigationAnswers")
                        .HasForeignKey("InvestigationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationAnswers_InvestigationQuestions_InvestigationQue~");

                    b.Navigation("InvestigationQuestion");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationAnswerByUser", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationAnswer", "InvestigationAnswer")
                        .WithMany()
                        .HasForeignKey("InvestigationAnswerId")
                        .HasConstraintName("FK_InvestigationAnswerByUsers_InvestigationAnswers_Investigatio~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationQuestion", "InvestigationQuestion")
                        .WithMany("InvestigationAnswerByUsers")
                        .HasForeignKey("InvestigationQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationAnswerByUsers_InvestigationQuestions_Investigat~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_InvestigationAnswerByUsers_AspNetUsers_UserId");

                    b.Navigation("InvestigationAnswer");

                    b.Navigation("InvestigationQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationEvaluator", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany("InvestigationConvocationEvaluators")
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationEvaluators_InvestigationConvocations~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationEvaluators_AspNetUsers_UserId");

                    b.Navigation("InvestigationConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany("InvestigationConvocationFiles")
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationFiles_InvestigationConvocations_Inve~");

                    b.Navigation("InvestigationConvocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationHistory", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany("InvestigationConvocationHistories")
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationHistories_InvestigationConvocations_~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_InvestigationConvocationHistories_AspNetUsers_UserId");

                    b.Navigation("InvestigationConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationInquiry", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("InvestigationConvocationInquiries")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationInquiries_InvestigationConvocationPo~");

                    b.Navigation("InvestigationConvocationPostulant");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ExternalEntity", "ExternalEntity")
                        .WithMany()
                        .HasForeignKey("ExternalEntityId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_ExternalEntities_External~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.FinancingInvestigation", "FinancingInvestigation")
                        .WithMany()
                        .HasForeignKey("FinancingInvestigationId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_FinancingInvestigations_F~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationArea", "InvestigationArea")
                        .WithMany()
                        .HasForeignKey("InvestigationAreaId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_InvestigationAreas_Invest~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany("InvestigationConvocationPostulants")
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationPostulants_InvestigationConvocations~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationPattern", "InvestigationPattern")
                        .WithMany()
                        .HasForeignKey("InvestigationPatternId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_InvestigationPatterns_Inv~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationType", "InvestigationType")
                        .WithMany()
                        .HasForeignKey("InvestigationTypeId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_InvestigationTypes_Invest~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.MethodologyType", "MethodologyType")
                        .WithMany()
                        .HasForeignKey("MethodologyTypeId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_MethodologyTypes_Methodol~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "MonitorUser")
                        .WithMany()
                        .HasForeignKey("MonitorUserId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_AspNetUsers_MonitorUserId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchCenter", "ResearchCenter")
                        .WithMany()
                        .HasForeignKey("ResearchCenterId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_ResearchCenters_ResearchC~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_InvestigationConvocationPostulants_AspNetUsers_UserId");

                    b.Navigation("ExternalEntity");

                    b.Navigation("FinancingInvestigation");

                    b.Navigation("InvestigationArea");

                    b.Navigation("InvestigationConvocation");

                    b.Navigation("InvestigationPattern");

                    b.Navigation("InvestigationType");

                    b.Navigation("MethodologyType");

                    b.Navigation("MonitorUser");

                    b.Navigation("ResearchCenter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationRequirement", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithOne("InvestigationConvocationRequirement")
                        .HasForeignKey("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationRequirement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationRequirements_InvestigationConvocatio~");

                    b.Navigation("InvestigationConvocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationSupervisor", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany("InvestigationConvocationSupervisors")
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationSupervisors_InvestigationConvocation~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationConvocationSupervisors_AspNetUsers_UserId");

                    b.Navigation("InvestigationConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProject", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany()
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationProjects_InvestigationConvocationPostulants_Inv~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectType", "InvestigationProjectType")
                        .WithMany()
                        .HasForeignKey("InvestigationProjectTypeId")
                        .HasConstraintName("FK_InvestigationProjects_InvestigationProjectTypes_Investigatio~");

                    b.Navigation("InvestigationConvocationPostulant");

                    b.Navigation("InvestigationProjectType");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectExpense", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectTask", "InvestigationProjectTask")
                        .WithMany()
                        .HasForeignKey("InvestigationProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationProjectExpenses_InvestigationProjectTasks_Inves~");

                    b.Navigation("InvestigationProjectTask");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectReport", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProject", "InvestigationProject")
                        .WithMany("InvestigationProjectReports")
                        .HasForeignKey("InvestigationProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationProjectReports_InvestigationProjects_Investigat~");

                    b.Navigation("InvestigationProject");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectTask", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProject", "InvestigationProject")
                        .WithMany("InvestigationProjectTasks")
                        .HasForeignKey("InvestigationProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationProjectTasks_InvestigationProjects_Investigatio~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_InvestigationProjectTasks_AspNetUsers_UserId");

                    b.Navigation("InvestigationProject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProjectTeamMember", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProject", "InvestigationProject")
                        .WithMany("InvestigationProjectTeamMembers")
                        .HasForeignKey("InvestigationProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationProjectTeamMembers_InvestigationProjects_Invest~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.TeamMemberRole", "TeamMemberRole")
                        .WithMany()
                        .HasForeignKey("TeamMemberRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationProjectTeamMembers_TeamMemberRoles_TeamMemberRo~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_InvestigationProjectTeamMembers_AspNetUsers_UserId");

                    b.Navigation("InvestigationProject");

                    b.Navigation("TeamMemberRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationQuestion", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationRequirement", "InvestigationConvocationRequirement")
                        .WithMany()
                        .HasForeignKey("InvestigationConvocationRequirementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationQuestions_InvestigationConvocationRequirements_~");

                    b.Navigation("InvestigationConvocationRequirement");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricCriterion", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricSection", "InvestigationRubricSection")
                        .WithMany("InvestigationRubricCriterions")
                        .HasForeignKey("InvestigationRubricSectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationRubricCriterions_InvestigationRubricSections_In~");

                    b.Navigation("InvestigationRubricSection");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricLevel", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricCriterion", "InvestigationRubricCriterion")
                        .WithMany("InvestigationRubricLevels")
                        .HasForeignKey("InvestigationRubricCriterionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationRubricLevels_InvestigationRubricCriterions_Inve~");

                    b.Navigation("InvestigationRubricCriterion");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricSection", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany()
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_InvestigationRubricSections_InvestigationConvocations_Invest~");

                    b.Navigation("InvestigationConvocation");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.MonitorConvocation", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", "InvestigationConvocation")
                        .WithMany("MonitorConvocations")
                        .HasForeignKey("InvestigationConvocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MonitorConvocations_InvestigationConvocations_InvestigationC~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MonitorConvocations_AspNetUsers_UserId");

                    b.Navigation("InvestigationConvocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.OperativePlan", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Unit", "Unit")
                        .WithMany("OperativePlans")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_OperativePlans_Units_UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantAnnexFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantAnnexFiles")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantAnnexFiles_InvestigationConvocationPostulants_Inves~");

                    b.Navigation("InvestigationConvocationPostulant");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantExecutionPlace", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantExecutionPlaces")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantExecutionPlaces_InvestigationConvocationPostulants_~");

                    b.Navigation("InvestigationConvocationPostulant");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantExternalMember", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantExternalMembers")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantExternalMembers_InvestigationConvocationPostulants_~");

                    b.Navigation("InvestigationConvocationPostulant");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantFinancialFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantFinancialFiles")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantFinancialFiles_InvestigationConvocationPostulants_I~");

                    b.Navigation("InvestigationConvocationPostulant");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantObservation", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantObservations")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantObservations_InvestigationConvocationPostulants_Inv~");

                    b.Navigation("InvestigationConvocationPostulant");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantResearchLine", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantResearchLines")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantResearchLines_InvestigationConvocationPostulants_In~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLine", "ResearchLine")
                        .WithMany()
                        .HasForeignKey("ResearchLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantResearchLines_ResearchLines_ResearchLineId");

                    b.Navigation("InvestigationConvocationPostulant");

                    b.Navigation("ResearchLine");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantRubricQualification", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .HasConstraintName("FK_PostulantRubricQualifications_AspNetUsers_EvaluatorId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantRubricQualifications")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantRubricQualifications_InvestigationConvocationPostul~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricCriterion", "InvestigationRubricCriterion")
                        .WithMany()
                        .HasForeignKey("InvestigationRubricCriterionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantRubricQualifications_InvestigationRubricCriterions_~");

                    b.Navigation("Evaluator");

                    b.Navigation("InvestigationConvocationPostulant");

                    b.Navigation("InvestigationRubricCriterion");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantTeamMemberUser", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantTeamMemberUsers")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantTeamMemberUsers_InvestigationConvocationPostulants_~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.TeamMemberRole", "TeamMemberRole")
                        .WithMany()
                        .HasForeignKey("TeamMemberRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantTeamMemberUsers_TeamMemberRoles_TeamMemberRoleId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_PostulantTeamMemberUsers_AspNetUsers_UserId");

                    b.Navigation("InvestigationConvocationPostulant");

                    b.Navigation("TeamMemberRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PostulantTechnicalFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("PostulantTechnicalFiles")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostulantTechnicalFiles_InvestigationConvocationPostulants_I~");

                    b.Navigation("InvestigationConvocationPostulant");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ProgressFileConvocationPostulant", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", "InvestigationConvocationPostulant")
                        .WithMany("ProgressFileConvocationPostulants")
                        .HasForeignKey("InvestigationConvocationPostulantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProgressFileConvocationPostulants_InvestigationConvocationPo~");

                    b.Navigation("InvestigationConvocationPostulant");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Publication", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.AuthorshipOrder", "AuthorshipOrder")
                        .WithMany("Publications")
                        .HasForeignKey("AuthorshipOrderId")
                        .HasConstraintName("FK_Publications_AuthorshipOrders_AuthorshipOrderId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IdentificationType", "IdentificationType")
                        .WithMany("Publications")
                        .HasForeignKey("IdentificationTypeId")
                        .HasConstraintName("FK_Publications_IdentificationTypes_IdentificationTypeId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IndexPlace", "IndexPlace")
                        .WithMany("Publications")
                        .HasForeignKey("IndexPlaceId")
                        .HasConstraintName("FK_Publications_IndexPlaces_IndexPlaceId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.OpusType", "OpusType")
                        .WithMany("Publications")
                        .HasForeignKey("OpusTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Publications_OpusTypes_OpusTypeId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublicationFunction", "PublicationFunction")
                        .WithMany("Publications")
                        .HasForeignKey("PublicationFunctionId")
                        .HasConstraintName("FK_Publications_PublicationFunctions_PublicationFunctionId");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany("Publications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Publications_AspNetUsers_UserId");

                    b.Navigation("AuthorshipOrder");

                    b.Navigation("IdentificationType");

                    b.Navigation("IndexPlace");

                    b.Navigation("OpusType");

                    b.Navigation("PublicationFunction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublicationAuthor", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Publication", "Publication")
                        .WithMany("PublicationAuthors")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublicationAuthors_Publications_PublicationId");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublicationFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Publication", "Publication")
                        .WithMany("PublicationFiles")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublicationFiles_Publications_PublicationId");

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBook", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublishedBooks_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBookAuthor", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBook", "PublishedBook")
                        .WithMany("PublishedBookAuthors")
                        .HasForeignKey("PublishedBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublishedBookAuthors_PublishedBooks_PublishedBookId");

                    b.Navigation("PublishedBook");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBookFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBook", "PublishedBook")
                        .WithMany("PublishedBookFiles")
                        .HasForeignKey("PublishedBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublishedBookFiles_PublishedBooks_PublishedBookId");

                    b.Navigation("PublishedBook");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBook", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublishedChapterBooks_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBookAuthor", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBook", "PublishedChapterBook")
                        .WithMany("PublishedChapterBookAuthors")
                        .HasForeignKey("PublishedChapterBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublishedChapterBookAuthors_PublishedChapterBooks_PublishedC~");

                    b.Navigation("PublishedChapterBook");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBookFile", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBook", "PublishedChapterBook")
                        .WithMany("PublishedChapterBookFiles")
                        .HasForeignKey("PublishedChapterBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublishedChapterBookFiles_PublishedChapterBooks_PublishedCha~");

                    b.Navigation("PublishedChapterBook");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLine", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLineCategory", "ResearchLineCategory")
                        .WithMany("ResearchLines")
                        .HasForeignKey("ResearchLineCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ResearchLines_ResearchLineCategories_ResearchLineCategoryId");

                    b.Navigation("ResearchLineCategory");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLineCategoryRequirement", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationRequirement", "InvestigationConvocationRequirement")
                        .WithMany("ResearchLineCategoryRequirements")
                        .HasForeignKey("InvestigationConvocationRequirementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ResearchLineCategoryRequirements_InvestigationConvocationReq~");

                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLineCategory", "ResearchLineCategory")
                        .WithMany("ResearchLineCategoryRequirements")
                        .HasForeignKey("ResearchLineCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ResearchLineCategoryRequirements_ResearchLineCategories_Rese~");

                    b.Navigation("InvestigationConvocationRequirement");

                    b.Navigation("ResearchLineCategory");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ScientificArticle", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProject", "InvestigationProject")
                        .WithMany()
                        .HasForeignKey("InvestigationProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ScientificArticles_InvestigationProjects_InvestigationProjec~");

                    b.Navigation("InvestigationProject");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Unit", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Units_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.General.ApplicationUser", b =>
                {
                    b.Navigation("Publications");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ApplicantTeacher", b =>
                {
                    b.Navigation("ApplicantTeacherDocuments");

                    b.Navigation("ApplicantTeacherInterviews");

                    b.Navigation("ApplicantTeacherRubricSectionDocuments");

                    b.Navigation("ConvocationAnswerByUsers");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.Convocation", b =>
                {
                    b.Navigation("ApplicantTeachers");

                    b.Navigation("ConvocationCalendars");

                    b.Navigation("ConvocationComitees");

                    b.Navigation("ConvocationDocuments");

                    b.Navigation("ConvocationRubricSections");

                    b.Navigation("ConvocationSections");

                    b.Navigation("ConvocationVacancies");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationAnswer", b =>
                {
                    b.Navigation("ConvocationAnswerByUser");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationDocument", b =>
                {
                    b.Navigation("ApplicantTeacherDocuments");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationQuestion", b =>
                {
                    b.Navigation("ConvocationAnswerByUsers");

                    b.Navigation("ConvocationAnswers");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationRubricSection", b =>
                {
                    b.Navigation("ConvocationRubricItems");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationSection", b =>
                {
                    b.Navigation("ConvocationQuestions");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherHiring.ConvocationVacancy", b =>
                {
                    b.Navigation("ApplicantTeachers");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.AuthorshipOrder", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Conference", b =>
                {
                    b.Navigation("ConferenceAuthors");

                    b.Navigation("ConferenceFiles");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Event", b =>
                {
                    b.Navigation("EventParticipants");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IdentificationType", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorConvocation", b =>
                {
                    b.Navigation("IncubatorConvocationAnnexes");

                    b.Navigation("IncubatorConvocationEvaluators");

                    b.Navigation("IncubatorConvocationFaculties");

                    b.Navigation("IncubatorConvocationFiles");

                    b.Navigation("IncubatorCoordinatorMonitors");

                    b.Navigation("IncubatorMonitors");

                    b.Navigation("IncubatorPostulations");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulation", b =>
                {
                    b.Navigation("IncubatorEquipmentExpenses");

                    b.Navigation("IncubatorOtherExpenses");

                    b.Navigation("IncubatorPostulationAnnexes");

                    b.Navigation("IncubatorPostulationSpecificGoals");

                    b.Navigation("IncubatorPostulationTeamMembers");

                    b.Navigation("IncubatorSuppliesExpenses");

                    b.Navigation("IncubatorThirdPartyServiceExpenses");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationActivity", b =>
                {
                    b.Navigation("IncubatorPostulationActivityMonths");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorPostulationSpecificGoal", b =>
                {
                    b.Navigation("IncubatorPostulationActivities");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricCriterion", b =>
                {
                    b.Navigation("IncubatorRubricLevels");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IncubatorRubricSection", b =>
                {
                    b.Navigation("IncubatorRubricCriterions");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.IndexPlace", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocation", b =>
                {
                    b.Navigation("CoordinatorMonitorConvocations");

                    b.Navigation("EvaluatorCommitteeConvocations");

                    b.Navigation("InvestigationConvocationEvaluators");

                    b.Navigation("InvestigationConvocationFiles");

                    b.Navigation("InvestigationConvocationHistories");

                    b.Navigation("InvestigationConvocationPostulants");

                    b.Navigation("InvestigationConvocationRequirement");

                    b.Navigation("InvestigationConvocationSupervisors");

                    b.Navigation("MonitorConvocations");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationPostulant", b =>
                {
                    b.Navigation("InvestigationConvocationInquiries");

                    b.Navigation("PostulantAnnexFiles");

                    b.Navigation("PostulantExecutionPlaces");

                    b.Navigation("PostulantExternalMembers");

                    b.Navigation("PostulantFinancialFiles");

                    b.Navigation("PostulantObservations");

                    b.Navigation("PostulantResearchLines");

                    b.Navigation("PostulantRubricQualifications");

                    b.Navigation("PostulantTeamMemberUsers");

                    b.Navigation("PostulantTechnicalFiles");

                    b.Navigation("ProgressFileConvocationPostulants");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationConvocationRequirement", b =>
                {
                    b.Navigation("ResearchLineCategoryRequirements");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationProject", b =>
                {
                    b.Navigation("InvestigationProjectReports");

                    b.Navigation("InvestigationProjectTasks");

                    b.Navigation("InvestigationProjectTeamMembers");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationQuestion", b =>
                {
                    b.Navigation("InvestigationAnswerByUsers");

                    b.Navigation("InvestigationAnswers");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricCriterion", b =>
                {
                    b.Navigation("InvestigationRubricLevels");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.InvestigationRubricSection", b =>
                {
                    b.Navigation("InvestigationRubricCriterions");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.OpusType", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Publication", b =>
                {
                    b.Navigation("PublicationAuthors");

                    b.Navigation("PublicationFiles");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublicationFunction", b =>
                {
                    b.Navigation("Publications");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedBook", b =>
                {
                    b.Navigation("PublishedBookAuthors");

                    b.Navigation("PublishedBookFiles");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.PublishedChapterBook", b =>
                {
                    b.Navigation("PublishedChapterBookAuthors");

                    b.Navigation("PublishedChapterBookFiles");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.ResearchLineCategory", b =>
                {
                    b.Navigation("ResearchLineCategoryRequirements");

                    b.Navigation("ResearchLines");
                });

            modelBuilder.Entity("AKDEMIC.DOMAIN.Entities.TeacherInvestigation.Unit", b =>
                {
                    b.Navigation("OperativePlans");
                });
#pragma warning restore 612, 618
        }
    }
}
